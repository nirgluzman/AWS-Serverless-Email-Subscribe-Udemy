service: sls-email-subscribe
frameworkVersion: '3'

custom:
  region: ${self:provider.region}
  bucketName: quote-bucket-repo
  tableName: 'users-table-${sls:stage}'

provider:
  name: aws
  profile: serverlessUser
  runtime: nodejs18.x
  region: 'us-east-1'
  stage: ${opt:stage, 'dev'}

  # Lambda function's IAM Roles
  iam:
    role:
      statements:
        - Effect: Allow
          Action: SNS:Publish
          Resource: !Ref QuotesMessages
        - Effect: Allow
          Action: s3:GetObject
          Resource: arn:aws:s3:::${self:custom.bucketName}/*
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [UsersTable, Arn]
  environment:
    REGION: ${self:custom.region}
    SENDGRID_API_KEY: TBD
    QUOTES_BUCKET: ${self:custom.bucketName}
    USERS_TABLE: ${self:custom.tableName}
    SNS_TOPIC_ARN: !Ref QuotesMessages

functions:
  quotes:
    handler: handler/getQuotes.getQuotes
    description: get quotes.json object from S3
    events:
      - http:
          path: quotes
          method: get
          cors: true
  subscribe:
    handler: handler/subscribeUser.subscribeUser
    description: store user data in DynamoDB
    events:
      - http:
          path: subscribe
          method: post
          cors: true
  staticMailer:
    handler: handler/staticMailer.staticMailer
    description: publish subscriber info to SNS topic
    events:
      - http:
          path: static-mailer
          method: post
          cors: true
  getSubscribers:
    handler: handler/getSubscribers.getSubscribers
    description: retrive all emails from DynamoDB
    events:
      - http:
          path: get-subscribers
          method: get
          cors: true
  sendEmail:
    handler: handler/sendEmail.sendEmail
    description: send Email using Twilio SendGrid
    events:
      - http:
          path: send-email
          method: post
          cors: true

      # Lambda to fire at 14:07 UTC everyday
      # https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html
      # https://www.serverless.com/framework/docs/providers/aws/events/schedule
      - schedule: cron(07 14 * * ? *)

resources:
  Resources:
    # DynamoDB Table
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.tableName}

    # SNS
    QuotesMessages:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: quotes-messages-${self:provider.stage}
    QuotesMessagesSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref QuotesMessages
        Protocol: email
        Endpoint: nir.gluzman@gmail.com
        DeliveryPolicy:
          healthyRetryPolicy:
            numRetries: 20
            minDelayTarget: 30
            maxDelayTarget: 600
            backoffFunction: exponential
